// room script file

int jsoneq(String json, JsonToken *tok, String s) {
  if (tok.type == eJSON_Tok_STRING && s.Length == (tok.end - tok.start) &&
      s == json.Substring(tok.start, tok.end-tok.start) ) {
    return 0;
  }
  return -1;
}

function room_AfterFadeIn()
{
  String typeStr[eJSON_TokMAX];
  typeStr[eJSON_Tok_UNDEFINED] = "Undefined";
  typeStr[eJSON_Tok_OBJECT] = "Object";
  typeStr[eJSON_Tok_ARRAY] = "Array";
  typeStr[eJSON_Tok_STRING] = "String";
  typeStr[ eJSON_Tok_PRIMITIVE] = "Primitive";
  
  String stateStr[eJP_StateMAX];
  stateStr[eJP_State_START] = "Start";
  stateStr[eJP_State_KEY] = "Key";
  stateStr[eJP_State_VALUE] = "Value";
  stateStr[eJP_State_ARRVALUE] = "ArrValue";
  stateStr[eJP_State_STOP] = "Stop";
  
  String json_string = "";
  json_string = json_string.Append("{\"squadName\":\"Super squad\",\"formed\":2016,\"active\":true,\"members\":[");
  json_string = json_string.Append("{\"name\":\"Molecule Man\",\"age\":29,\"secretIdentity\":\"Dan Jukes\",\"powers\":[\"Radiation resistance\",\"Radiation blast\"]},");
  json_string = json_string.Append("{\"name\":\"Madam Uppercut\",\"age\":39,\"secretIdentity\":\"Jane Wilson\",\"powers\":[\"Million punch\",\"Super reflexes\"]},");
  json_string = json_string.Append("{\"name\":\"Eternal Flame\",\"age\":100,\"secretIdentity\":\"Unknown\",\"powers\":[\"Immortality\",\"Heat Immunity\",\"Interdimensional jump\"]}]}");
  //json_string = "{ \"name\":\"John\", \"age\":30, \"car\":null }";

  MiniJsonParser jp;
  jp.Init(json_string);
  
  bool isname;
  String names = "names: ";
  
  while(jp.NextToken())
  {
   // Display("State: %s   TokType: %s\nTok:\n\n%s",  stateStr[jp.State], typeStr[jp.CurrentTokenType], jp.CurrentTokenAsString);
    
    if(jp.State == eJP_State_VALUE || jp.State == eJP_State_ARRVALUE)
    {
      Display(jp.FullKey.Append(String.Format(": %s",jp.CurrentTokenAsString)));
    }    
  }
  
  Display(names);
/*
  JsonParser*  parser = new JsonParser;
  
  int token_count = 128;
  JsonToken* t[] = JsonToken.NewArray(token_count);

  int r = parser.Parse(json_string, t, token_count);

  if (r < 0) {
    Display("Failed to parse JSON: %d\n", r);
  }

  Display(json_string);

  if (r < 1 || t[0].type != eJSON_Tok_OBJECT) {
    Display("Object expected\n");
  }

  File* log = File.Open("$SAVEGAMEDIR$/log.log",eFileAppend);
  log.WriteRawLine("i ; tok_text ; tok.size ; tok.type;  tok.start ; tok.end ; tok.parent ");
  for(int i=0; i<r  ; i++){
    JsonToken* toke = t[i];

    log.WriteRawLine(String.Format("%d ; %s ; %d ; %s ; %d ; %d ; %d", i, toke.ToString(json_string), toke.size , toke.TypeAsString,  toke.start ,  toke.end ,  toke.parent ));
  }

  log.WriteRawLine(json_string);
  log.Close();
  */
}
