// room script file
jsmn_parser* parser;
jsmntok* t[];
String simple_json;


int jsoneq(String json, jsmntok *tok, String s) {
  if (tok.type == eJSMN_STRING && s.Length == (tok.end - tok.start) &&
      s == json.Substring(tok.start, tok.end-tok.start) ) {
    return 0;
  }
  return -1;
}

#define MAX_TOKENS 256

function room_AfterFadeIn()
{
  //File* jsonFile = File.Open("$SAVEGAMEDIR$/CaptainClown.json",eFileRead);
  simple_json = "{\"squadName\":\"Super squad\",\"formed\":2016,\"active\":true,\"members\":[{\"name\":\"Molecule Man\",\"age\":29,\"secretIdentity\":\"Dan Jukes\",\"powers\":[\"Radiation resistance\",\"Radiation blast\"]},{\"name\":\"Madam Uppercut\",\"age\":39,\"secretIdentity\":\"Jane Wilson\",\"powers\":[\"Million punch\",\"Super reflexes\"]},{\"name\":\"Eternal Flame\",\"age\":100,\"secretIdentity\":\"Unknown\",\"powers\":[\"Immortality\",\"Heat Immunity\",\"Interdimensional jump\"]}]}";

 // simple_json = jsonFile.ReadRawLineBack();

  //simple_json = "{ \"name\":\"John\", \"age\":30, \"car\":null }";

  parser = new jsmn_parser;
  jsmn_init(parser);
  t = new jsmntok[MAX_TOKENS];
  for(int i=0; i<MAX_TOKENS; i++) t[i] = new jsmntok;
  int r;

  r = jsmn_parse(parser, simple_json, simple_json.Length, t, MAX_TOKENS);

  if (r < 0) {
    Display("Failed to parse JSON: %d\n", r);
    //return 1;
  }

  Display(simple_json);

    /* Assume the top-level element is an object */
  if (r < 1 || t[0].type != eJSMN_OBJECT) {
    Display("Object expected\n");
    //return 1;
  }


  File* log = File.Open("$SAVEGAMEDIR$/log.log",eFileAppend);
  log.WriteRawLine("i ; tok_text ; tok.size ; tok.type;  tok.start ; tok.end ; tok.parent ");
  for(int i=0; i<MAX_TOKENS  ; i++){
    jsmntok* toke = t[i];

    log.WriteRawLine(String.Format("%d ; %s ; %d ; %d ; %d ; %d ; %d", i, simple_json.Substring(toke.start, toke.end-toke.start), toke.size , toke.type ,  toke.start ,  toke.end ,  toke.parent ));

    if(i>12) break;
    //Display("%d [Parent: %d[- %s   type=%d[size= %d", i, toke.parent,   simple_json.Substring(toke.start, toke.end-toke.start), toke.type,  toke.size);
  }

  log.WriteRawLine(simple_json);
  log.Close();

  //jsmn_
}

function room_RepExec()
{
  /*
  bool last_return;
  int ident_level = 0;
  int size[MAX_TOKENS];

  AgsImGui.NewFrame();

  for(int i=0; i<MAX_TOKENS; i++){
    jsmntok* toke = t[i];
    bool is_key = false;
    bool should_pop = false;

    if(toke.size > 0 || toke.start != toke.end && toke.end-toke.start > 0 ){
      if(toke.type == eJSMN_OBJECT){
        last_return = AgsImGui.TreeNode(simple_json.Substring(toke.start, toke.end-toke.start));
        size[i] = toke.size;
        ident_level++;
      } else if(last_return != false && toke.type != eJSMN_UNDEFINED){
        if(toke.type == eJSMN_STRING && toke.size == 0){
          // key
          AgsImGui.Text(simple_json.Substring(toke.start, toke.end-toke.start));
          is_key = true;
        } else {
          // value
          AgsImGui.BulletText(simple_json.Substring(toke.start, toke.end-toke.start));
          size[i-(toke.parent+1)]--;
          if(size[i-(toke.parent+1)] == 0) should_pop = true;
        }
      }
    }

    if(ident_level>0 && last_return != false && is_key == false && should_pop){
      AgsImGui.TreePop();
      ident_level--;
    }

  }

  AgsImGui.Render();*/
}
