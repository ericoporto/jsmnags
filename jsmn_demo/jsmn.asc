// new module script

/**
 * Allocates a fresh unused token from the token pool.
 */
jsmntok *jsmn_alloc_token(jsmn_parser *parser, jsmntok *tokens[], int num_tokens) {
  jsmntok *tok;
  if (parser.toknext >= num_tokens) {
    return null;
  }
  tok = tokens[parser.toknext];
  parser.toknext = parser.toknext+1;
  tok.end = -1;
  tok.start = -1;
  tok.size = 0;
  tok.parent = -1;
  return tok;
}

/**
 * Fills token type and boundaries.
 */
void jsmn_fill_token(jsmntok *token, jsmntype type, int start, int end) {
  token.type = type;
  token.start = start;
  token.end = end;
  token.size = 0;
}


int _parse_found(int start, jsmn_parser *parser, String js, int len, jsmntok *tokens[], int num_tokens){
  jsmntok *token;
  if (tokens == null) {
    parser.pos--;
    return 0;
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
  if (token == null) {
    parser.pos = start;
    return eJSMN_ERROR_NOMEM;
  }
  jsmn_fill_token(token, eJSMN_PRIMITIVE, start, parser.pos);

  token.parent = parser.toksuper;
  parser.pos--;
  return 0;
}

/**
 * Fills next available token with JSON primitive.
 */
int jsmn_parse_primitive(jsmn_parser *parser, String js, int len, jsmntok *tokens[], int num_tokens) {
  jsmntok *token;
  int start;

  start = parser.pos;

  for (; parser.pos < len && js.Chars[parser.pos] != 0; parser.pos++) {
    switch (js.Chars[parser.pos]) {

    /* In strict mode primitive must be followed by "," or "}" or "]" */
    case ':':
    case 20: /* '\t' */
    case 18: /* '\r' */
    case 14: /* '\n' */
    case ' ':
    case ',':
    case ']':
    case '}':
      return _parse_found(start, parser, js, len, tokens, num_tokens);
    default:
                   /* to quiet a warning from gcc*/
      break;
    }
    if (js.Chars[parser.pos] < 32 || js.Chars[parser.pos] >= 127) {
      parser.pos = start;
      AbortGame("77");
      return eJSMN_ERROR_INVAL;
    }
  }

  /* In strict mode primitive must be followed by a comma/object/array */
  parser.pos = start;
  return eJSMN_ERROR_PART;
}

/**
 * Fills next token with JSON string.
 */
int jsmn_parse_string(jsmn_parser *parser, String js, int len, jsmntok *tokens[], int num_tokens) {
  jsmntok *token;

  int start = parser.pos;

  parser.pos++;

  /* Skip starting quote */
  for (; parser.pos < len && js.Chars[parser.pos] != 0; parser.pos++) {
    char c = js.Chars[parser.pos];

    /* Quote: end of string */
    if (c == '"') {
      if (tokens == null) {
        return 0;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
      if (token == null) {
        parser.pos = start;
        return eJSMN_ERROR_NOMEM;
      }
      jsmn_fill_token(token, eJSMN_STRING, start + 1, parser.pos);
      token.parent = parser.toksuper;
      return 0;
    }

    /* Backslash: Quoted symbol expected */
    if (c == 92 && parser.pos + 1 < len) {
      parser.pos++;
      switch (js.Chars[parser.pos]) {
      /* Allowed escaped symbols */
      case '"':
      case '/':
      case 92:
      case 'b':
      case 'f':
      case 'r':
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser.pos++;
        for (int i = 0; i < 4 && parser.pos < len && js.Chars[parser.pos] != 0; i++) {
          /* If it isn't a hex character we have an error */
          if (!((js.Chars[parser.pos] >= 48 && js.Chars[parser.pos] <= 57) ||   /* 0-9 */
                (js.Chars[parser.pos] >= 65 && js.Chars[parser.pos] <= 70) ||   /* A-F */
                (js.Chars[parser.pos] >= 97 && js.Chars[parser.pos] <= 102))) { /* a-f */
            parser.pos = start;
            AbortGame("140");
            return eJSMN_ERROR_INVAL;
          }
          parser.pos++;
        }
        parser.pos--;
        break;
      /* Unexpected symbol */
      default:
        parser.pos = start;
        AbortGame("150");
        return eJSMN_ERROR_INVAL;
      }
    }
  }
  parser.pos = start;
  return eJSMN_ERROR_PART;
}


/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, String js, int len, jsmntok *tokens[], int num_tokens) {
  int r;
  jsmntok *t;
  jsmntok *token;
  int count = parser.toknext;

  for (; parser.pos < len && js.Chars[parser.pos] != 0; parser.pos++) {
    char c;
    jsmntype type;

    c = js.Chars[parser.pos];

    switch (c) {
    case '{':
    case '[':
      count++;
      if (tokens == null) {
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
      if (token == null) {
        return eJSMN_ERROR_NOMEM;
      }
      if (parser.toksuper != -1) {
        t = tokens[parser.toksuper];

        /* In strict mode an object or array can't become a key */
        if (t.type == eJSMN_OBJECT) {
        AbortGame("191");
          return eJSMN_ERROR_INVAL;
        }

        t.size++;
        token.parent = parser.toksuper;
      }
      if(c == '{') token.type = eJSMN_OBJECT;
      else token.type = eJSMN_ARRAY;
      token.start = parser.pos;
      parser.toksuper = parser.toknext - 1;
      break;
    case '}':
    case ']':
      if (tokens == null) {
        break;
      }

      if(c == '}') type = eJSMN_OBJECT;
      else type = eJSMN_ARRAY;

      if (parser.toknext < 1) {
      AbortGame("213");
        return eJSMN_ERROR_INVAL;
      }
      token = tokens[parser.toknext - 1];
      for (;;) {
        if (token.start != -1 && token.end == -1) {
          if (token.type != type) {
          AbortGame("220");
            return eJSMN_ERROR_INVAL;
          }
          token.end = parser.pos + 1;
          parser.toksuper = token.parent;
          break;
        }
        if (token.parent == -1) {
          if (token.type != type || parser.toksuper == -1) {
          AbortGame("229");
            return eJSMN_ERROR_INVAL;
          }
          break;
        }
        token = tokens[token.parent];
      }
      break;
    case '"': /* '\"' */
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
      if (r < 0) {
        return r;
      }
      count++;
      if (parser.toksuper != -1 && tokens != null) {
        tokens[parser.toksuper].size++;
      }
      break;
    case 20: /* '\t' */
    case 18: /* '\r' */
    case 14: /* '\n' */
    case ' ':
      break;
    case ':':
      parser.toksuper = parser.toknext - 1;
      break;
    case ',':
      if (tokens != null && parser.toksuper != -1 &&
          tokens[parser.toksuper].type != eJSMN_ARRAY &&
          tokens[parser.toksuper].type != eJSMN_OBJECT) {

        parser.toksuper = tokens[parser.toksuper].parent;


      }
      break;

    /* In strict mode primitives are: numbers and booleans */
    case '-':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case 't':
    case 'f':
    case 'n':
      /* And they must not be keys of the object */
      if (tokens != null && parser.toksuper != -1) {
        t = null;
        t = tokens[parser.toksuper];
        if (t.type == eJSMN_OBJECT ||
            (t.type == eJSMN_STRING && t.size != 0)) {
            AbortGame("287");
          return eJSMN_ERROR_INVAL;
        }
      }

      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
      if (r < 0) {
        return r;
      }
      count++;
      if (parser.toksuper != -1 && tokens != null) {
        tokens[parser.toksuper].size++;
      }
      break;

    /* Unexpected char in strict mode */
    default:
    AbortGame("%d %c",parser.pos,c);
      return eJSMN_ERROR_INVAL;
    }

  }

  if (tokens != null) {
    for (int i = parser.toknext - 1; i >= 0; i--) {
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
        return eJSMN_ERROR_PART;
      }
    }
  }

  return count;
}

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
  parser.pos = 0;
  parser.toknext = 0;
  parser.toksuper = -1;
}
